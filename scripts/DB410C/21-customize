#!/bin/sh
# Download license file and firmware
if [ -n "${QCOM_FIRMWARE}" ]; then
    rm -rf qcom_firmware && mkdir qcom_firmware && cd qcom_firmware
    wget -q ${QCOM_FIRMWARE}
    echo "${QCOM_FIRMWARE_MD5}  $(basename ${QCOM_FIRMWARE})" > MD5
    md5sum -c MD5
    unzip $(basename ${QCOM_FIRMWARE})
    # check LICENSE file (for Linux BSP)
    echo "${QCOM_FIRMWARE_LICENSE_MD5} " linux-board-support-package-*/LICENSE > MD5
    md5sum -c MD5
    cd -
    MTOOLS_SKIP_CHECK=1 mcopy -i qcom_firmware/linux-board-support-package-*/bootloaders-linux/NON-HLOS.bin \
         ::image/modem.* ::image/mba.mbn ::image/wcnss.* qcom_firmware/linux-board-support-package-*/proprietary-linux
    cp -f qcom_firmware/linux-board-support-package-*/LICENSE $target/etc/QCOM-LINUX-BOARD-SUPPORT-LICENSE
    cp -a qcom_firmware/linux-board-support-package-*/proprietary-linux/* $target/lib/firmware

fi

if [ -f $target/etc/NetworkManager/NetworkManager.conf ]; then
   cat << EOF >> $target/etc/NetworkManager/NetworkManager.conf
[device]
wifi.scan-rand-mac-address=no
EOF
fi

cat << EOF > $target/etc/default/u-boot
U_BOOT_FDT=qcom/apq8016-sbc.dtb
U_BOOT_PARAMETERS="rw rootwait"
EOF

cat << EOF > $target/etc/fstab
/dev/disk/by-partlabel/rootfs / ext4   rw,relatime,data=ordered 0 1
EOF

# hack - the "make deb" kernel package should handle this
for kernel in $target/boot/vmlinuz-*
do
    mv $kernel $kernel.gz
    gunzip $kernel
    ver=$(echo $kernel|sed -e 's,.*vmlinuz-,,')
    chroot $target /usr/sbin/update-initramfs -c -k $ver
done

chroot $target /usr/sbin/u-boot-update||true
